1 	 #include <stdio.h>
 2 	 int main(int argc, char* argv[])
 3 	 {
 4 	   int **adj_matrix;
 5 	   char d;
 6 	   int r, c, nodes;
 7 	   printf ("== Adjacency Matrix Demo ==\n");
 8 	   printf ("Number of Nodes : ");
 9 	   scanf ("%d", &nodes);
 10 	 
 11 	   /* Dynamic allocation of matrix array */
 12 	   adj_matrix = (int **) malloc (sizeof(int **)*nodes);
 13 	   if(!adj_matrix) {
 14 	     printf ("Fatal error in memory allocation!");
 15 	     return -1;
 16 	   }
 17 	   for (r = 0; r < nodes; r++) {
 18 	     adj_matrix[r] = (int *) malloc(sizeof(int)*nodes);
 19 	     if(!adj_matrix[r]) {
 20 	       printf ("Fatal error in memory allocation!");
 21 	       return -1;
 22 	     }
 23 	   }
 24 	   for (r = 0; r < nodes; r++) {
 25 	     for (c = 0; c < nodes; c++) {
 26 	         adj_matrix[r][c] = 0;
 27 	     }
 28 	 
 29 	   }
 30 	   r = 0;
 31 	   c = 0;
 32 	   printf ("Node pair format <U/D> <V1> <V2>\n");
 33 	   do {
 34 	     printf ("Enter Node Pair : ");
 35 	     fflush(stdin);
 36 	     scanf ("%c %d %d", &d, &r, &c);
 37 	     if (r > 0 && r <= nodes && c > 0 && c <= nodes){
 38 	             adj_matrix[r - 1][c - 1] = 1;
 39 	       if(d == 'U' || d == 'u'){
 40 	       adj_matrix[c - 1][r - 1] = 1;
 41 	       printf ("Undirected connection between %d to %d\n", r, c);
 42 	       } else {
 43 	             printf ("Directed connection from %d to %d\n", r, c);
  	       }
 5 	     }
  	   }while(r > 0 && c > 0);
  	 
  	   printf("\nAdjacency matrix\n");
  	   printf("   ");
  	   for (c = 0; c < nodes; c++) {
  	     printf("%.1d ", c + 1);
  	   }
  	   printf("\n");
  	   for (c = 0; c < nodes; c++) {
  	     printf("---");
  	   }
  	   printf("\n");
  	   for (r = 0; r < nodes; r++) {
  	     printf("%.1d| ", r+1);
  	     for (c = 0; c < nodes; c++) {
  	         printf("%.1d ", adj_matrix[r][c]);
  	     }
  	     printf("\n");
  	   }
  	   return 0;
  	 }